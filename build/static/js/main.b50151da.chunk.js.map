{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","console","log","data","then","response","noteObject","post","updatedNote","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialData","notesToShow","filter","map","find","changedNote","updatedData","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","date","Date","toISOString","Math","random","addedData","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAaeA,EAXF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UAAY,oBAAsB,iBAErD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCM3BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCQEC,EAfA,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,4G,gBCVNC,EAAU,wDAqBD,EAnBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GAG1B,OAFAI,QAAQC,IAAIJ,EAAQK,MAEbL,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASF,SAe9B,EAZI,SAAAG,GAEf,OADgBP,IAAMQ,KAAKV,EAASS,GACrBF,MAAK,SAAAN,GAAO,OAAIA,EAAQK,SAU5B,EANI,SAACK,EAAaC,GAE7B,OADgBV,IAAMW,IAAN,UAAab,EAAb,YAAwBY,GAAMD,GAC/BJ,MAAK,SAAAN,GAAO,OAAIA,EAAQK,SC0E5BQ,EAtFH,WAAM,MAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,cAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIcJ,oBAAS,GAJvB,mBAITK,EAJS,KAIAC,EAJA,OAKwBN,mBAAS,MALjC,mBAKTO,EALS,KAKKC,EALL,KAchBC,qBANa,WACXC,IACGlB,MAAK,SAAAmB,GAAW,OAAIT,EAASS,QAIlB,IAGhB,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aA+ChE,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAAS4B,IACvB,6BACGK,EAAYE,KAAI,SAAC3C,GAAD,OACb,cAAC,EAAD,CAAMA,KAAMA,EAAoBC,iBAAkB,kBAlDjC,SAACyB,GACjB,uCAAmCA,GAA5C,IACM1B,EAAO8B,EAAMc,MAAK,SAAA5C,GAAI,OAAIA,EAAK0B,KAAOA,KACtCmB,EAAW,2BAAO7C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CoC,EAAuBM,EAAanB,GACjCL,MAAK,SAAAyB,GACJf,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAK0B,KAAOA,EAAK1B,EAAO8C,SAEpDC,OAAM,SAAAC,GACL,IAAMxC,EAAO,mBAAcR,EAAKK,QAAnB,6CACbgC,EAAgB7B,GAChByC,YAAY,kBAAMZ,EAAgB,QAAO,KACzCN,EAASD,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAK0B,KAAOA,SAqCkBwB,CAAmBlD,EAAK0B,MAAzD1B,EAAK0B,SAIlC,uBAAMyB,SApCM,SAACC,GACfA,EAAMC,iBACN,IAAM9B,EAAY,CAChBlB,QAAS2B,EACTsB,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAU,IAG5BnB,EAAuBhB,GACpBF,MAAK,SAAAsC,GACJ1B,EAAW,IACXF,EAASD,EAAM8B,OAAOD,QAyBxB,UACE,uBACIE,MAAO7B,EACP8B,SAvBkB,SAACV,GAC3BnB,EAAWmB,EAAMW,OAAOF,UAuBpB,wBAAQG,KAAK,SAAb,qBAEF,yBAAQ1D,QApBgB,SAAC8C,GAC3BjB,GAAYD,IAmBV,kBAA4CA,EAAU,YAAc,MAApE,QACA,cAAC,EAAD,Q,MClFN+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b50151da.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important ? 'make not imporant' : 'make important'\n\n  return(\n    <li className=\"note\"> \n      {note.content}\n      <button onClick={toggleImportance}>{label}</button> \n    </li>\n    )\n  }\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null){\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em> Note App, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from 'axios'\n\nconst baseUrl = \"https://sheltered-fjord-76303.herokuapp.com/api/notes\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    console.log(request.data)\n    //return request.then(request => request.data)\n    return request.then(response => response.data)\n}\n\nconst createNote = noteObject => {\n    const request = axios.post(baseUrl, noteObject)\n    return request.then(request => request.data)\n\n}\n\nconst updateNote = (updatedNote, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedNote)\n    return request.then(request => request.data)\n}\n\n\nexport default {getAll, createNote, updateNote}","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\n\nconst App = () => {\n  //states\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"A new note\")\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  //function for getting notes\n  const hook = () => {\n    noteService.getAll()\n      .then(initialData => setNotes(initialData))\n  }\n\n  //effect for getting notes and saving to state\n  useEffect(hook, [])\n\n  //array of notes to show on screen\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  //function for toggling importance of notes\n  const toggleImportanceOf = (id) => {\n    const url = `https://localhost:3001/notes/${id}`\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService.updateNote(changedNote, id)\n      .then(updatedData => {\n        setNotes(notes.map(note => note.id !== id ? note : updatedData))\n      })\n      .catch(error => {\n        const message =`The note ${note.content} has already been deleted from the server`\n        setErrorMessage(message)\n        setTimeout( () => setErrorMessage(null), 5000)\n        setNotes(notes.filter(note => note.id !== id ))\n      })\n  }\n\n  //function for adding a note\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject ={\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() <0.5\n    }\n\n    noteService.createNote(noteObject)\n      .then(addedData => {\n        setNewNote('')\n        setNotes(notes.concat(addedData))\n      })\n  }\n\n  //handling changes to the 'newNote' state\n  const handleNewNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n\n  //handling changes to the showAll state\n  const handleShowAllChange = (event) => {\n    setShowAll(!showAll)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map((note) => \n            <Note note={note} key={note.id} toggleImportance={() => toggleImportanceOf(note.id)}/>\n            )\n        }\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n            value={newNote} \n            onChange={handleNewNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <button onClick={handleShowAllChange}>Show {showAll ? \"important\" : \"all\"}  </button>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}